{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "bbd7cdff",
   "metadata": {
    "papermill": {
     "duration": 0.01578,
     "end_time": "2024-11-17T04:28:25.062780",
     "exception": false,
     "start_time": "2024-11-17T04:28:25.047000",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Proyecto: Predicción de retorno de clientes.\n",
    "\n",
    "Curso: Introducción a la Ciencia de Datos con Python 2024-2\n",
    "\n",
    "Escrito por Hector Valdes Hurtado"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "95dd6879",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2024-11-17T04:28:25.096655Z",
     "iopub.status.busy": "2024-11-17T04:28:25.096108Z",
     "iopub.status.idle": "2024-11-17T04:28:29.212342Z",
     "shell.execute_reply": "2024-11-17T04:28:29.211004Z"
    },
    "papermill": {
     "duration": 4.137873,
     "end_time": "2024-11-17T04:28:29.215659",
     "exception": false,
     "start_time": "2024-11-17T04:28:25.077786",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "#Requeried libraries\n",
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "#imported models\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.metrics import accuracy_score\n",
    "\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "clf = DecisionTreeClassifier(random_state=0)\n",
    "\n",
    "from sklearn.ensemble import RandomForestClassifier\n",
    "\n",
    "clf = RandomForestClassifier(max_depth=2, random_state=0)\n",
    "\n",
    "#imported metrics \n",
    "from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import precision_score\n",
    "from sklearn.metrics import recall_score\n",
    "from sklearn.metrics import f1_score\n",
    "from sklearn.metrics import roc_auc_score\n",
    "\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import classification_report"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "98c0b7cd",
   "metadata": {
    "papermill": {
     "duration": 0.01453,
     "end_time": "2024-11-17T04:28:29.245704",
     "exception": false,
     "start_time": "2024-11-17T04:28:29.231174",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "1. CSV cargado utilizando la libreria de Pandas (pd) y se muestran las primeras filas"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "2869dbb7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-17T04:28:29.277905Z",
     "iopub.status.busy": "2024-11-17T04:28:29.277056Z",
     "iopub.status.idle": "2024-11-17T04:28:29.337432Z",
     "shell.execute_reply": "2024-11-17T04:28:29.335955Z"
    },
    "papermill": {
     "duration": 0.080074,
     "end_time": "2024-11-17T04:28:29.340457",
     "exception": false,
     "start_time": "2024-11-17T04:28:29.260383",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_id</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>total_spent</th>\n",
       "      <th>frequency</th>\n",
       "      <th>days_since_last_purchase</th>\n",
       "      <th>marketing_engaged</th>\n",
       "      <th>returned_next_month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>25</td>\n",
       "      <td>Male</td>\n",
       "      <td>200.50</td>\n",
       "      <td>5</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>34</td>\n",
       "      <td>Female</td>\n",
       "      <td>120.75</td>\n",
       "      <td>2</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>28</td>\n",
       "      <td>Male</td>\n",
       "      <td>315.00</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>45</td>\n",
       "      <td>Female</td>\n",
       "      <td>150.00</td>\n",
       "      <td>3</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>42</td>\n",
       "      <td>Male</td>\n",
       "      <td>175.50</td>\n",
       "      <td>4</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>96</td>\n",
       "      <td>33</td>\n",
       "      <td>Female</td>\n",
       "      <td>240.00</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>97</td>\n",
       "      <td>31</td>\n",
       "      <td>Male</td>\n",
       "      <td>305.00</td>\n",
       "      <td>7</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>98</td>\n",
       "      <td>40</td>\n",
       "      <td>Female</td>\n",
       "      <td>215.25</td>\n",
       "      <td>4</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>99</td>\n",
       "      <td>36</td>\n",
       "      <td>Male</td>\n",
       "      <td>185.50</td>\n",
       "      <td>3</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>100</td>\n",
       "      <td>29</td>\n",
       "      <td>Female</td>\n",
       "      <td>225.00</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    customer_id  age  gender  total_spent  frequency  \\\n",
       "0             1   25    Male       200.50          5   \n",
       "1             2   34  Female       120.75          2   \n",
       "2             3   28    Male       315.00          6   \n",
       "3             4   45  Female       150.00          3   \n",
       "4             5   42    Male       175.50          4   \n",
       "..          ...  ...     ...          ...        ...   \n",
       "95           96   33  Female       240.00          5   \n",
       "96           97   31    Male       305.00          7   \n",
       "97           98   40  Female       215.25          4   \n",
       "98           99   36    Male       185.50          3   \n",
       "99          100   29  Female       225.00          6   \n",
       "\n",
       "    days_since_last_purchase  marketing_engaged  returned_next_month  \n",
       "0                         12                  1                    1  \n",
       "1                         30                  0                    0  \n",
       "2                          5                  1                    1  \n",
       "3                         15                  1                    0  \n",
       "4                         25                  0                    0  \n",
       "..                       ...                ...                  ...  \n",
       "95                         7                  1                    1  \n",
       "96                         9                  1                    1  \n",
       "97                        14                  0                    0  \n",
       "98                        20                  1                    0  \n",
       "99                        10                  0                    1  \n",
       "\n",
       "[100 rows x 8 columns]"
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data = pd.read_csv(\"/kaggle/input/customers/synthetic_customer_data.csv\")\n",
    "\n",
    "train_data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b52f47a0",
   "metadata": {
    "papermill": {
     "duration": 0.015091,
     "end_time": "2024-11-17T04:28:29.371129",
     "exception": false,
     "start_time": "2024-11-17T04:28:29.356038",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "2.1 Se muestra información general de dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "51cedc3f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-17T04:28:29.409679Z",
     "iopub.status.busy": "2024-11-17T04:28:29.409080Z",
     "iopub.status.idle": "2024-11-17T04:28:29.446246Z",
     "shell.execute_reply": "2024-11-17T04:28:29.445055Z"
    },
    "papermill": {
     "duration": 0.063057,
     "end_time": "2024-11-17T04:28:29.450125",
     "exception": false,
     "start_time": "2024-11-17T04:28:29.387068",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 100 entries, 0 to 99\n",
      "Data columns (total 8 columns):\n",
      " #   Column                    Non-Null Count  Dtype  \n",
      "---  ------                    --------------  -----  \n",
      " 0   customer_id               100 non-null    int64  \n",
      " 1   age                       100 non-null    int64  \n",
      " 2   gender                    100 non-null    object \n",
      " 3   total_spent               100 non-null    float64\n",
      " 4   frequency                 100 non-null    int64  \n",
      " 5   days_since_last_purchase  100 non-null    int64  \n",
      " 6   marketing_engaged         100 non-null    int64  \n",
      " 7   returned_next_month       100 non-null    int64  \n",
      "dtypes: float64(1), int64(6), object(1)\n",
      "memory usage: 6.4+ KB\n"
     ]
    }
   ],
   "source": [
    "train_data.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6e8c5551",
   "metadata": {
    "papermill": {
     "duration": 0.015204,
     "end_time": "2024-11-17T04:28:29.484401",
     "exception": false,
     "start_time": "2024-11-17T04:28:29.469197",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "2.2 Se muestran estadisticas descriptivas como la cantidad de registros \"count\", media aritmética \"mean\", desviacion estandar \"std\", percentiles, etc."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "1344c033",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-17T04:28:29.518028Z",
     "iopub.status.busy": "2024-11-17T04:28:29.517383Z",
     "iopub.status.idle": "2024-11-17T04:28:29.554736Z",
     "shell.execute_reply": "2024-11-17T04:28:29.553443Z"
    },
    "papermill": {
     "duration": 0.057656,
     "end_time": "2024-11-17T04:28:29.557692",
     "exception": false,
     "start_time": "2024-11-17T04:28:29.500036",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_id</th>\n",
       "      <th>age</th>\n",
       "      <th>total_spent</th>\n",
       "      <th>frequency</th>\n",
       "      <th>days_since_last_purchase</th>\n",
       "      <th>marketing_engaged</th>\n",
       "      <th>returned_next_month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "      <td>100.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>50.500000</td>\n",
       "      <td>34.300000</td>\n",
       "      <td>213.250000</td>\n",
       "      <td>4.500000</td>\n",
       "      <td>14.700000</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>29.011492</td>\n",
       "      <td>6.163595</td>\n",
       "      <td>59.069596</td>\n",
       "      <td>1.507557</td>\n",
       "      <td>7.681146</td>\n",
       "      <td>0.492366</td>\n",
       "      <td>0.502519</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>25.000000</td>\n",
       "      <td>120.750000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>25.750000</td>\n",
       "      <td>29.000000</td>\n",
       "      <td>175.500000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>50.500000</td>\n",
       "      <td>33.500000</td>\n",
       "      <td>207.875000</td>\n",
       "      <td>4.500000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>75.250000</td>\n",
       "      <td>40.000000</td>\n",
       "      <td>240.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>100.000000</td>\n",
       "      <td>45.000000</td>\n",
       "      <td>315.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>30.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       customer_id         age  total_spent   frequency  \\\n",
       "count   100.000000  100.000000   100.000000  100.000000   \n",
       "mean     50.500000   34.300000   213.250000    4.500000   \n",
       "std      29.011492    6.163595    59.069596    1.507557   \n",
       "min       1.000000   25.000000   120.750000    2.000000   \n",
       "25%      25.750000   29.000000   175.500000    3.000000   \n",
       "50%      50.500000   33.500000   207.875000    4.500000   \n",
       "75%      75.250000   40.000000   240.000000    6.000000   \n",
       "max     100.000000   45.000000   315.000000    7.000000   \n",
       "\n",
       "       days_since_last_purchase  marketing_engaged  returned_next_month  \n",
       "count                100.000000         100.000000           100.000000  \n",
       "mean                  14.700000           0.600000             0.500000  \n",
       "std                    7.681146           0.492366             0.502519  \n",
       "min                    5.000000           0.000000             0.000000  \n",
       "25%                    9.000000           0.000000             0.000000  \n",
       "50%                   13.000000           1.000000             0.500000  \n",
       "75%                   20.000000           1.000000             1.000000  \n",
       "max                   30.000000           1.000000             1.000000  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ebab23ad",
   "metadata": {
    "papermill": {
     "duration": 0.019837,
     "end_time": "2024-11-17T04:28:29.593435",
     "exception": false,
     "start_time": "2024-11-17T04:28:29.573598",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "3.1 Se muestran dos histogramas, el primero con la distribucín de Edad y el segundo de Gasto"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "2ada539b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-17T04:28:29.635807Z",
     "iopub.status.busy": "2024-11-17T04:28:29.635110Z",
     "iopub.status.idle": "2024-11-17T04:28:30.354599Z",
     "shell.execute_reply": "2024-11-17T04:28:30.353186Z"
    },
    "papermill": {
     "duration": 0.745806,
     "end_time": "2024-11-17T04:28:30.357933",
     "exception": false,
     "start_time": "2024-11-17T04:28:29.612127",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'Frecuencia')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.subplot(1, 2, 1)\n",
    "plt.hist(train_data['age'], edgecolor='black')\n",
    "plt.title('Distribución de Edad')\n",
    "plt.xlabel('Edad')\n",
    "plt.ylabel('Frecuencia')\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.hist(train_data['total_spent'], edgecolor='black')\n",
    "plt.title('Distribución de Gasto')\n",
    "plt.xlabel('Gasto Total')\n",
    "plt.ylabel('Frecuencia')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c58121db",
   "metadata": {
    "papermill": {
     "duration": 0.016699,
     "end_time": "2024-11-17T04:28:30.391333",
     "exception": false,
     "start_time": "2024-11-17T04:28:30.374634",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "3.2 Se muestra un gráfico de barras para observar la distribución de genero"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "588e9107",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-17T04:28:30.426409Z",
     "iopub.status.busy": "2024-11-17T04:28:30.425856Z",
     "iopub.status.idle": "2024-11-17T04:28:30.669766Z",
     "shell.execute_reply": "2024-11-17T04:28:30.668591Z"
    },
    "papermill": {
     "duration": 0.264848,
     "end_time": "2024-11-17T04:28:30.672651",
     "exception": false,
     "start_time": "2024-11-17T04:28:30.407803",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<Axes: xlabel='gender', ylabel='count'>"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.countplot(data=train_data, x='gender')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2c05d73f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-17T04:28:30.709482Z",
     "iopub.status.busy": "2024-11-17T04:28:30.708368Z",
     "iopub.status.idle": "2024-11-17T04:28:30.728644Z",
     "shell.execute_reply": "2024-11-17T04:28:30.727304Z"
    },
    "papermill": {
     "duration": 0.042016,
     "end_time": "2024-11-17T04:28:30.731569",
     "exception": false,
     "start_time": "2024-11-17T04:28:30.689553",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_id</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>total_spent</th>\n",
       "      <th>frequency</th>\n",
       "      <th>days_since_last_purchase</th>\n",
       "      <th>marketing_engaged</th>\n",
       "      <th>returned_next_month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    customer_id    age  gender  total_spent  frequency  \\\n",
       "0         False  False   False        False      False   \n",
       "1         False  False   False        False      False   \n",
       "2         False  False   False        False      False   \n",
       "3         False  False   False        False      False   \n",
       "4         False  False   False        False      False   \n",
       "..          ...    ...     ...          ...        ...   \n",
       "95        False  False   False        False      False   \n",
       "96        False  False   False        False      False   \n",
       "97        False  False   False        False      False   \n",
       "98        False  False   False        False      False   \n",
       "99        False  False   False        False      False   \n",
       "\n",
       "    days_since_last_purchase  marketing_engaged  returned_next_month  \n",
       "0                      False              False                False  \n",
       "1                      False              False                False  \n",
       "2                      False              False                False  \n",
       "3                      False              False                False  \n",
       "4                      False              False                False  \n",
       "..                       ...                ...                  ...  \n",
       "95                     False              False                False  \n",
       "96                     False              False                False  \n",
       "97                     False              False                False  \n",
       "98                     False              False                False  \n",
       "99                     False              False                False  \n",
       "\n",
       "[100 rows x 8 columns]"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.isnull()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2aec2366",
   "metadata": {
    "papermill": {
     "duration": 0.016627,
     "end_time": "2024-11-17T04:28:30.765466",
     "exception": false,
     "start_time": "2024-11-17T04:28:30.748839",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "4.1 Se verifican si exixten valores no nulos utilizando el metodo .sum como la suma total de nullos así como el porcentaje de la proporción que representan estos valores nulos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "3d369eb1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-17T04:28:30.802841Z",
     "iopub.status.busy": "2024-11-17T04:28:30.801720Z",
     "iopub.status.idle": "2024-11-17T04:28:30.814632Z",
     "shell.execute_reply": "2024-11-17T04:28:30.813378Z"
    },
    "papermill": {
     "duration": 0.034376,
     "end_time": "2024-11-17T04:28:30.817199",
     "exception": false,
     "start_time": "2024-11-17T04:28:30.782823",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "customer_id                 0.0\n",
       "age                         0.0\n",
       "gender                      0.0\n",
       "total_spent                 0.0\n",
       "frequency                   0.0\n",
       "days_since_last_purchase    0.0\n",
       "marketing_engaged           0.0\n",
       "returned_next_month         0.0\n",
       "dtype: float64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data.isnull().sum()\n",
    "train_data.isnull().mean()*100"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bd03f2a0",
   "metadata": {
    "papermill": {
     "duration": 0.017345,
     "end_time": "2024-11-17T04:28:30.852535",
     "exception": false,
     "start_time": "2024-11-17T04:28:30.835190",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "4.2 Se idetifican y \"mapean\" los valores de la comulna gener, para tranformarlos a valores numericos de 0 par Female y 1 para Male, se define esta variable tipo int 8, para mayor eficiencia de computo al no utilizar tanta memoria"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "c59f873b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-17T04:28:30.890451Z",
     "iopub.status.busy": "2024-11-17T04:28:30.889544Z",
     "iopub.status.idle": "2024-11-17T04:28:30.912170Z",
     "shell.execute_reply": "2024-11-17T04:28:30.910710Z"
    },
    "papermill": {
     "duration": 0.044994,
     "end_time": "2024-11-17T04:28:30.915099",
     "exception": false,
     "start_time": "2024-11-17T04:28:30.870105",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>customer_id</th>\n",
       "      <th>age</th>\n",
       "      <th>gender</th>\n",
       "      <th>total_spent</th>\n",
       "      <th>frequency</th>\n",
       "      <th>days_since_last_purchase</th>\n",
       "      <th>marketing_engaged</th>\n",
       "      <th>returned_next_month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>25</td>\n",
       "      <td>1</td>\n",
       "      <td>200.50</td>\n",
       "      <td>5</td>\n",
       "      <td>12</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>34</td>\n",
       "      <td>0</td>\n",
       "      <td>120.75</td>\n",
       "      <td>2</td>\n",
       "      <td>30</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>28</td>\n",
       "      <td>1</td>\n",
       "      <td>315.00</td>\n",
       "      <td>6</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>45</td>\n",
       "      <td>0</td>\n",
       "      <td>150.00</td>\n",
       "      <td>3</td>\n",
       "      <td>15</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>42</td>\n",
       "      <td>1</td>\n",
       "      <td>175.50</td>\n",
       "      <td>4</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95</th>\n",
       "      <td>96</td>\n",
       "      <td>33</td>\n",
       "      <td>0</td>\n",
       "      <td>240.00</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>96</th>\n",
       "      <td>97</td>\n",
       "      <td>31</td>\n",
       "      <td>1</td>\n",
       "      <td>305.00</td>\n",
       "      <td>7</td>\n",
       "      <td>9</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>97</th>\n",
       "      <td>98</td>\n",
       "      <td>40</td>\n",
       "      <td>0</td>\n",
       "      <td>215.25</td>\n",
       "      <td>4</td>\n",
       "      <td>14</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>99</td>\n",
       "      <td>36</td>\n",
       "      <td>1</td>\n",
       "      <td>185.50</td>\n",
       "      <td>3</td>\n",
       "      <td>20</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99</th>\n",
       "      <td>100</td>\n",
       "      <td>29</td>\n",
       "      <td>0</td>\n",
       "      <td>225.00</td>\n",
       "      <td>6</td>\n",
       "      <td>10</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>100 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "    customer_id  age  gender  total_spent  frequency  \\\n",
       "0             1   25       1       200.50          5   \n",
       "1             2   34       0       120.75          2   \n",
       "2             3   28       1       315.00          6   \n",
       "3             4   45       0       150.00          3   \n",
       "4             5   42       1       175.50          4   \n",
       "..          ...  ...     ...          ...        ...   \n",
       "95           96   33       0       240.00          5   \n",
       "96           97   31       1       305.00          7   \n",
       "97           98   40       0       215.25          4   \n",
       "98           99   36       1       185.50          3   \n",
       "99          100   29       0       225.00          6   \n",
       "\n",
       "    days_since_last_purchase  marketing_engaged  returned_next_month  \n",
       "0                         12                  1                    1  \n",
       "1                         30                  0                    0  \n",
       "2                          5                  1                    1  \n",
       "3                         15                  1                    0  \n",
       "4                         25                  0                    0  \n",
       "..                       ...                ...                  ...  \n",
       "95                         7                  1                    1  \n",
       "96                         9                  1                    1  \n",
       "97                        14                  0                    0  \n",
       "98                        20                  1                    0  \n",
       "99                        10                  0                    1  \n",
       "\n",
       "[100 rows x 8 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data['gender'] = train_data['gender'].map({'Female': 0, 'Male': 1}).astype(np.int8)\n",
    "train_data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "752ed9eb",
   "metadata": {
    "papermill": {
     "duration": 0.017696,
     "end_time": "2024-11-17T04:28:30.950864",
     "exception": false,
     "start_time": "2024-11-17T04:28:30.933168",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "4.3 Se hace un escalamiento de las comunas: 'age', 'total_spent', 'frequency', 'days_since_last_purchase' con el fin de asegurar la consistencia en los datos que será utilizados en el entrenamiento del modelo"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "9e7bfb4c",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-17T04:28:30.988786Z",
     "iopub.status.busy": "2024-11-17T04:28:30.988176Z",
     "iopub.status.idle": "2024-11-17T04:28:31.005264Z",
     "shell.execute_reply": "2024-11-17T04:28:31.003841Z"
    },
    "papermill": {
     "duration": 0.039541,
     "end_time": "2024-11-17T04:28:31.008170",
     "exception": false,
     "start_time": "2024-11-17T04:28:30.968629",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-1 {color: black;background-color: white;}#sk-container-id-1 pre{padding: 0;}#sk-container-id-1 div.sk-toggleable {background-color: white;}#sk-container-id-1 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-1 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-1 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-1 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-1 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-1 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-1 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-1 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-1 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-1 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-1 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-1 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-1 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-1 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-1 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-1 div.sk-item {position: relative;z-index: 1;}#sk-container-id-1 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-1 div.sk-item::before, #sk-container-id-1 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-1 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-1 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-1 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-1 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-1 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-1 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-1 div.sk-label-container {text-align: center;}#sk-container-id-1 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-1 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-1\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>StandardScaler()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-1\" type=\"checkbox\" checked><label for=\"sk-estimator-id-1\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">StandardScaler</label><div class=\"sk-toggleable__content\"><pre>StandardScaler()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "StandardScaler()"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "scaler = StandardScaler()\n",
    "scaler.fit(train_data[['age', 'total_spent', 'frequency', 'days_since_last_purchase']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "3349bb27",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-17T04:28:31.048801Z",
     "iopub.status.busy": "2024-11-17T04:28:31.047300Z",
     "iopub.status.idle": "2024-11-17T04:28:31.058114Z",
     "shell.execute_reply": "2024-11-17T04:28:31.056918Z"
    },
    "papermill": {
     "duration": 0.03414,
     "end_time": "2024-11-17T04:28:31.060822",
     "exception": false,
     "start_time": "2024-11-17T04:28:31.026682",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "train_data[['age', 'total_spent', 'frequency', 'days_since_last_purchase']] = scaler.transform(train_data[['age', 'total_spent', 'frequency', 'days_since_last_purchase']])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "aea58396",
   "metadata": {
    "papermill": {
     "duration": 0.017513,
     "end_time": "2024-11-17T04:28:31.096472",
     "exception": false,
     "start_time": "2024-11-17T04:28:31.078959",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "4.3 Se despliegan las caracteristicas generales con los valores de las columnas que previamente se escalaron"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "ca9e741a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-17T04:28:31.135838Z",
     "iopub.status.busy": "2024-11-17T04:28:31.135274Z",
     "iopub.status.idle": "2024-11-17T04:28:31.166792Z",
     "shell.execute_reply": "2024-11-17T04:28:31.165226Z"
    },
    "papermill": {
     "duration": 0.054435,
     "end_time": "2024-11-17T04:28:31.169821",
     "exception": false,
     "start_time": "2024-11-17T04:28:31.115386",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>total_spent</th>\n",
       "      <th>frequency</th>\n",
       "      <th>days_since_last_purchase</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1.000000e+02</td>\n",
       "      <td>1.000000e+02</td>\n",
       "      <td>1.000000e+02</td>\n",
       "      <td>1.000000e+02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>4.329870e-16</td>\n",
       "      <td>-1.776357e-17</td>\n",
       "      <td>-4.440892e-18</td>\n",
       "      <td>5.440093e-17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.005038e+00</td>\n",
       "      <td>1.005038e+00</td>\n",
       "      <td>1.005038e+00</td>\n",
       "      <td>1.005038e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-1.516461e+00</td>\n",
       "      <td>-1.573838e+00</td>\n",
       "      <td>-1.666667e+00</td>\n",
       "      <td>-1.269194e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>-8.642198e-01</td>\n",
       "      <td>-6.422962e-01</td>\n",
       "      <td>-1.000000e+00</td>\n",
       "      <td>-7.458152e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>-1.304483e-01</td>\n",
       "      <td>-9.145277e-02</td>\n",
       "      <td>0.000000e+00</td>\n",
       "      <td>-2.224361e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>9.294439e-01</td>\n",
       "      <td>4.551370e-01</td>\n",
       "      <td>1.000000e+00</td>\n",
       "      <td>6.934773e-01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.744746e+00</td>\n",
       "      <td>1.731222e+00</td>\n",
       "      <td>1.666667e+00</td>\n",
       "      <td>2.001925e+00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                age   total_spent     frequency  days_since_last_purchase\n",
       "count  1.000000e+02  1.000000e+02  1.000000e+02              1.000000e+02\n",
       "mean   4.329870e-16 -1.776357e-17 -4.440892e-18              5.440093e-17\n",
       "std    1.005038e+00  1.005038e+00  1.005038e+00              1.005038e+00\n",
       "min   -1.516461e+00 -1.573838e+00 -1.666667e+00             -1.269194e+00\n",
       "25%   -8.642198e-01 -6.422962e-01 -1.000000e+00             -7.458152e-01\n",
       "50%   -1.304483e-01 -9.145277e-02  0.000000e+00             -2.224361e-01\n",
       "75%    9.294439e-01  4.551370e-01  1.000000e+00              6.934773e-01\n",
       "max    1.744746e+00  1.731222e+00  1.666667e+00              2.001925e+00"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_data[['age', 'total_spent', 'frequency', 'days_since_last_purchase']].describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c7678e6",
   "metadata": {
    "papermill": {
     "duration": 0.018103,
     "end_time": "2024-11-17T04:28:31.206924",
     "exception": false,
     "start_time": "2024-11-17T04:28:31.188821",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "5. Se divide qué caracteristica será objetivo de predecir (returned_next_month) así como algún atributo que no sea importante para el entrenamiento como el customer_id"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "15bd075f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-17T04:28:31.246632Z",
     "iopub.status.busy": "2024-11-17T04:28:31.246039Z",
     "iopub.status.idle": "2024-11-17T04:28:31.254160Z",
     "shell.execute_reply": "2024-11-17T04:28:31.252797Z"
    },
    "papermill": {
     "duration": 0.03147,
     "end_time": "2024-11-17T04:28:31.256909",
     "exception": false,
     "start_time": "2024-11-17T04:28:31.225439",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# variables predictoras\n",
    "X = train_data.drop(['returned_next_month', 'customer_id'], axis=1)\n",
    "\n",
    "# variable objetivo\n",
    "y = train_data['returned_next_month']"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e93bf7cd",
   "metadata": {
    "papermill": {
     "duration": 0.018397,
     "end_time": "2024-11-17T04:28:31.293808",
     "exception": false,
     "start_time": "2024-11-17T04:28:31.275411",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "5.2 Se asigna un 20 porciento de los datos a la validación (testing) del modelo) el 80% serán los datos de entrenamiento"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "51408e45",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-17T04:28:31.333469Z",
     "iopub.status.busy": "2024-11-17T04:28:31.332936Z",
     "iopub.status.idle": "2024-11-17T04:28:31.344574Z",
     "shell.execute_reply": "2024-11-17T04:28:31.343204Z"
    },
    "papermill": {
     "duration": 0.034683,
     "end_time": "2024-11-17T04:28:31.347370",
     "exception": false,
     "start_time": "2024-11-17T04:28:31.312687",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Dividir los datos\n",
    "X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "52b288bb",
   "metadata": {
    "papermill": {
     "duration": 0.019094,
     "end_time": "2024-11-17T04:28:31.384984",
     "exception": false,
     "start_time": "2024-11-17T04:28:31.365890",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "6.1 Se selecciona el primer modelo de clasficicación como Regresión Logistica (model1) y se realiza la entramiento"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "204f8bba",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-17T04:28:31.425220Z",
     "iopub.status.busy": "2024-11-17T04:28:31.423887Z",
     "iopub.status.idle": "2024-11-17T04:28:31.452554Z",
     "shell.execute_reply": "2024-11-17T04:28:31.450860Z"
    },
    "papermill": {
     "duration": 0.051877,
     "end_time": "2024-11-17T04:28:31.455400",
     "exception": false,
     "start_time": "2024-11-17T04:28:31.403523",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-2 {color: black;background-color: white;}#sk-container-id-2 pre{padding: 0;}#sk-container-id-2 div.sk-toggleable {background-color: white;}#sk-container-id-2 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-2 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-2 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-2 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-2 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-2 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-2 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-2 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-2 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-2 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-2 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-2 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-2 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-2 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-2 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-2 div.sk-item {position: relative;z-index: 1;}#sk-container-id-2 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-2 div.sk-item::before, #sk-container-id-2 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-2 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-2 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-2 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-2 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-2 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-2 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-2 div.sk-label-container {text-align: center;}#sk-container-id-2 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-2 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-2\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>LogisticRegression()</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-2\" type=\"checkbox\" checked><label for=\"sk-estimator-id-2\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">LogisticRegression</label><div class=\"sk-toggleable__content\"><pre>LogisticRegression()</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "LogisticRegression()"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model1 = LogisticRegression() # modelo de regresión logistica\n",
    "model1.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0adeaec2",
   "metadata": {
    "papermill": {
     "duration": 0.018324,
     "end_time": "2024-11-17T04:28:31.492724",
     "exception": false,
     "start_time": "2024-11-17T04:28:31.474400",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "6.2 Se selecciona el segundo modelo de clasficicación como Árbol de Decisión (model2) y se realiza la entramiento"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "df179df9",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-17T04:28:31.532638Z",
     "iopub.status.busy": "2024-11-17T04:28:31.532051Z",
     "iopub.status.idle": "2024-11-17T04:28:31.548670Z",
     "shell.execute_reply": "2024-11-17T04:28:31.547459Z"
    },
    "papermill": {
     "duration": 0.039893,
     "end_time": "2024-11-17T04:28:31.551208",
     "exception": false,
     "start_time": "2024-11-17T04:28:31.511315",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-3 {color: black;background-color: white;}#sk-container-id-3 pre{padding: 0;}#sk-container-id-3 div.sk-toggleable {background-color: white;}#sk-container-id-3 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-3 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-3 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-3 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-3 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-3 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-3 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-3 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-3 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-3 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-3 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-3 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-3 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-3 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-3 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-3 div.sk-item {position: relative;z-index: 1;}#sk-container-id-3 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-3 div.sk-item::before, #sk-container-id-3 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-3 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-3 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-3 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-3 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-3 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-3 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-3 div.sk-label-container {text-align: center;}#sk-container-id-3 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-3 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-3\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>DecisionTreeClassifier(random_state=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-3\" type=\"checkbox\" checked><label for=\"sk-estimator-id-3\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">DecisionTreeClassifier</label><div class=\"sk-toggleable__content\"><pre>DecisionTreeClassifier(random_state=0)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "DecisionTreeClassifier(random_state=0)"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model2 = DecisionTreeClassifier(random_state=0) # modelo de árbol de decisión\n",
    "model2.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8220d959",
   "metadata": {
    "papermill": {
     "duration": 0.018703,
     "end_time": "2024-11-17T04:28:31.588989",
     "exception": false,
     "start_time": "2024-11-17T04:28:31.570286",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "6.3 Se selecciona el tercer modelo de clasficicación como Bosque aleatorio (model3) y se realiza la entramiento"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "78c85e2e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-17T04:28:31.629795Z",
     "iopub.status.busy": "2024-11-17T04:28:31.629181Z",
     "iopub.status.idle": "2024-11-17T04:28:31.865088Z",
     "shell.execute_reply": "2024-11-17T04:28:31.863603Z"
    },
    "papermill": {
     "duration": 0.259872,
     "end_time": "2024-11-17T04:28:31.868300",
     "exception": false,
     "start_time": "2024-11-17T04:28:31.608428",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-4 {color: black;background-color: white;}#sk-container-id-4 pre{padding: 0;}#sk-container-id-4 div.sk-toggleable {background-color: white;}#sk-container-id-4 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-4 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-4 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-4 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-4 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-4 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-4 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-4 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-4 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-4 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-4 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-4 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-4 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-4 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-4 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-4 div.sk-item {position: relative;z-index: 1;}#sk-container-id-4 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-4 div.sk-item::before, #sk-container-id-4 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-4 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-4 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-4 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-4 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-4 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-4 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-4 div.sk-label-container {text-align: center;}#sk-container-id-4 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-4 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-4\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(max_depth=2, random_state=0)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-4\" type=\"checkbox\" checked><label for=\"sk-estimator-id-4\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(max_depth=2, random_state=0)</pre></div></div></div></div></div>"
      ],
      "text/plain": [
       "RandomForestClassifier(max_depth=2, random_state=0)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model3 = RandomForestClassifier(max_depth=2, random_state=0) # modelo de bosque aleatorio\n",
    "model3.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "048ad503",
   "metadata": {
    "papermill": {
     "duration": 0.019284,
     "end_time": "2024-11-17T04:28:31.907146",
     "exception": false,
     "start_time": "2024-11-17T04:28:31.887862",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "7.1 Para evaluar los modelos primero calcularemos la varible objetivo a partir de de los datos de validación previamente separados y se realiza la inferencia con cada uno de los modelos"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "cbf90ad6",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-17T04:28:31.949871Z",
     "iopub.status.busy": "2024-11-17T04:28:31.949263Z",
     "iopub.status.idle": "2024-11-17T04:28:31.972120Z",
     "shell.execute_reply": "2024-11-17T04:28:31.970746Z"
    },
    "papermill": {
     "duration": 0.049017,
     "end_time": "2024-11-17T04:28:31.975596",
     "exception": false,
     "start_time": "2024-11-17T04:28:31.926579",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[0 0 1 1 0 1 1 1 1 1 0 1 0 0 1 0 1 0 1 0]\n",
      "[0 0 1 1 0 1 1 1 1 1 0 1 0 0 1 0 1 0 1 0]\n",
      "[0 0 1 1 0 1 1 1 1 1 0 1 0 0 1 0 1 0 1 0]\n"
     ]
    }
   ],
   "source": [
    "y_pred1 = model1.predict(X_val) # modelo de Regresión logistica\n",
    "print(y_pred1)\n",
    "y_pred2 = model2.predict(X_val) # modelo de árbol de decisión\n",
    "print(y_pred2)\n",
    "y_pred3 = model3.predict(X_val) # modelo de bosque aleatorio\n",
    "print(y_pred3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e02a1a8",
   "metadata": {
    "papermill": {
     "duration": 0.020495,
     "end_time": "2024-11-17T04:28:32.015834",
     "exception": false,
     "start_time": "2024-11-17T04:28:31.995339",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "desde este punto se puede observar que los tres modelos predicen los mismos valores por lo que se espera que tengan metricas iguales"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "15988127",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-17T04:28:32.057991Z",
     "iopub.status.busy": "2024-11-17T04:28:32.057428Z",
     "iopub.status.idle": "2024-11-17T04:28:32.088725Z",
     "shell.execute_reply": "2024-11-17T04:28:32.086947Z"
    },
    "papermill": {
     "duration": 0.056379,
     "end_time": "2024-11-17T04:28:32.091803",
     "exception": false,
     "start_time": "2024-11-17T04:28:32.035424",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Las metricas de rendimiento para el modelo de Regresión logistica son las siguientes:\n",
      "Accuracy score: 1.0\n",
      "Pression scrore: 1.0\n",
      "Recall scrore: 1.0\n",
      "F1 scrore: 1.0\n",
      "Roc-Auc scrore: 1.0\n"
     ]
    }
   ],
   "source": [
    "# Para el modelo de Regresión logistica\n",
    "# Evalua el rendimiento métricas de rendimiento: exactitud, precisión, recall, F1 y AUC-ROC.\n",
    "\n",
    "print(\"Las metricas de rendimiento para el modelo de Regresión logistica son las siguientes:\")\n",
    "accuracy1 = accuracy_score(y_val, y_pred1)\n",
    "print(f\"Accuracy score: {accuracy1:.1f}\")\n",
    "pression1 = precision_score(y_val, y_pred1)\n",
    "print(f\"Pression scrore: {pression1:.1f}\")\n",
    "recall1 = recall_score(y_val, y_pred1, average='binary', zero_division=1)\n",
    "print(f\"Recall scrore: {recall1:.1f}\")\n",
    "f1_1 = f1_score(y_val, y_pred1, zero_division=1.0)\n",
    "print(f\"F1 scrore: {f1_1:.1f}\")\n",
    "roc1 = roc_auc_score(y, model1.predict_proba(X)[:, 1])\n",
    "print(f\"Roc-Auc scrore: {roc1:.1f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "18a2d4d7",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-17T04:28:32.134447Z",
     "iopub.status.busy": "2024-11-17T04:28:32.133928Z",
     "iopub.status.idle": "2024-11-17T04:28:32.160225Z",
     "shell.execute_reply": "2024-11-17T04:28:32.158641Z"
    },
    "papermill": {
     "duration": 0.051476,
     "end_time": "2024-11-17T04:28:32.163596",
     "exception": false,
     "start_time": "2024-11-17T04:28:32.112120",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Las metricas de rendimiento para el modelo de Árbol de decisión son las siguientes:\n",
      "Accuracy score: 1.0\n",
      "Pression scrore: 1.0\n",
      "Recall scrore: 1.0\n",
      "F1 scrore: 1.0\n",
      "Roc-Auc scrore: 1.0\n"
     ]
    }
   ],
   "source": [
    "# Para el modelo de árbol de decisión\n",
    "# Evalua el rendimiento métricas de rendimiento: exactitud, precisión, recall, F1 y AUC-ROC.\n",
    "\n",
    "print(\"Las metricas de rendimiento para el modelo de Árbol de decisión son las siguientes:\")\n",
    "accuracy2 = accuracy_score(y_val, y_pred2)\n",
    "print(f\"Accuracy score: {accuracy2:.1f}\")\n",
    "pression2 = precision_score(y_val, y_pred2)\n",
    "print(f\"Pression scrore: {pression2:.1f}\")\n",
    "recall2 = recall_score(y_val, y_pred2, average='binary', zero_division=1)\n",
    "print(f\"Recall scrore: {recall2:.1f}\")\n",
    "f1_2 = f1_score(y_val, y_pred2, zero_division=1.0)\n",
    "print(f\"F1 scrore: {f1_2:.1f}\")\n",
    "roc2 = roc_auc_score(y, model2.predict_proba(X)[:, 1])\n",
    "print(f\"Roc-Auc scrore: {roc2:.1f}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "6d227e70",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-17T04:28:32.206266Z",
     "iopub.status.busy": "2024-11-17T04:28:32.205705Z",
     "iopub.status.idle": "2024-11-17T04:28:32.238793Z",
     "shell.execute_reply": "2024-11-17T04:28:32.237416Z"
    },
    "papermill": {
     "duration": 0.058662,
     "end_time": "2024-11-17T04:28:32.242029",
     "exception": false,
     "start_time": "2024-11-17T04:28:32.183367",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Las metricas de rendimiento para el modelo de Bosque aleatorio son las siguientes:\n",
      "Accuracy score: 1.0\n",
      "Pression scrore: 1.0\n",
      "Recall scrore: 1.0\n",
      "F1 scrore: 1.0\n",
      "Roc-Auc scrore: 1.0\n"
     ]
    }
   ],
   "source": [
    "# Para el modelo de bosque aleatorio\n",
    "# Evalua el rendimiento métricas de rendimiento: exactitud, precisión, recall, F1 y AUC-ROC.\n",
    "\n",
    "print(\"Las metricas de rendimiento para el modelo de Bosque aleatorio son las siguientes:\")\n",
    "accuracy3 = accuracy_score(y_val, y_pred3)\n",
    "print(f\"Accuracy score: {accuracy3:.1f}\")\n",
    "pression3 = precision_score(y_val, y_pred3)\n",
    "print(f\"Pression scrore: {pression3:.1f}\")\n",
    "recall3 = recall_score(y_val, y_pred3, average='binary', zero_division=1)\n",
    "print(f\"Recall scrore: {recall3:.1f}\")\n",
    "f1_3 = f1_score(y_val, y_pred3, zero_division=1.0)\n",
    "print(f\"F1 scrore: {f1_3:.1f}\")\n",
    "roc3 = roc_auc_score(y, model3.predict_proba(X)[:, 1])\n",
    "print(f\"Roc-Auc scrore: {roc3:.1f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "df57ba4d",
   "metadata": {
    "papermill": {
     "duration": 0.020078,
     "end_time": "2024-11-17T04:28:32.282121",
     "exception": false,
     "start_time": "2024-11-17T04:28:32.262043",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Las metricas de evaluación entre los tres modelos anteriores son iguales por lo que es indistito cual elegir como mejor modelo"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9c89dd56",
   "metadata": {
    "papermill": {
     "duration": 0.01968,
     "end_time": "2024-11-17T04:28:32.322864",
     "exception": false,
     "start_time": "2024-11-17T04:28:32.303184",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "8.1 Se realiza la optimizaicón de los hiperparámetros en el modelo de Boque aleatorio"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "853ab37e",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-17T04:28:32.365012Z",
     "iopub.status.busy": "2024-11-17T04:28:32.364439Z",
     "iopub.status.idle": "2024-11-17T04:29:10.953830Z",
     "shell.execute_reply": "2024-11-17T04:29:10.952686Z"
    },
    "papermill": {
     "duration": 38.634275,
     "end_time": "2024-11-17T04:29:10.977051",
     "exception": false,
     "start_time": "2024-11-17T04:28:32.342776",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<style>#sk-container-id-5 {color: black;background-color: white;}#sk-container-id-5 pre{padding: 0;}#sk-container-id-5 div.sk-toggleable {background-color: white;}#sk-container-id-5 label.sk-toggleable__label {cursor: pointer;display: block;width: 100%;margin-bottom: 0;padding: 0.3em;box-sizing: border-box;text-align: center;}#sk-container-id-5 label.sk-toggleable__label-arrow:before {content: \"▸\";float: left;margin-right: 0.25em;color: #696969;}#sk-container-id-5 label.sk-toggleable__label-arrow:hover:before {color: black;}#sk-container-id-5 div.sk-estimator:hover label.sk-toggleable__label-arrow:before {color: black;}#sk-container-id-5 div.sk-toggleable__content {max-height: 0;max-width: 0;overflow: hidden;text-align: left;background-color: #f0f8ff;}#sk-container-id-5 div.sk-toggleable__content pre {margin: 0.2em;color: black;border-radius: 0.25em;background-color: #f0f8ff;}#sk-container-id-5 input.sk-toggleable__control:checked~div.sk-toggleable__content {max-height: 200px;max-width: 100%;overflow: auto;}#sk-container-id-5 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {content: \"▾\";}#sk-container-id-5 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 input.sk-hidden--visually {border: 0;clip: rect(1px 1px 1px 1px);clip: rect(1px, 1px, 1px, 1px);height: 1px;margin: -1px;overflow: hidden;padding: 0;position: absolute;width: 1px;}#sk-container-id-5 div.sk-estimator {font-family: monospace;background-color: #f0f8ff;border: 1px dotted black;border-radius: 0.25em;box-sizing: border-box;margin-bottom: 0.5em;}#sk-container-id-5 div.sk-estimator:hover {background-color: #d4ebff;}#sk-container-id-5 div.sk-parallel-item::after {content: \"\";width: 100%;border-bottom: 1px solid gray;flex-grow: 1;}#sk-container-id-5 div.sk-label:hover label.sk-toggleable__label {background-color: #d4ebff;}#sk-container-id-5 div.sk-serial::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: 0;}#sk-container-id-5 div.sk-serial {display: flex;flex-direction: column;align-items: center;background-color: white;padding-right: 0.2em;padding-left: 0.2em;position: relative;}#sk-container-id-5 div.sk-item {position: relative;z-index: 1;}#sk-container-id-5 div.sk-parallel {display: flex;align-items: stretch;justify-content: center;background-color: white;position: relative;}#sk-container-id-5 div.sk-item::before, #sk-container-id-5 div.sk-parallel-item::before {content: \"\";position: absolute;border-left: 1px solid gray;box-sizing: border-box;top: 0;bottom: 0;left: 50%;z-index: -1;}#sk-container-id-5 div.sk-parallel-item {display: flex;flex-direction: column;z-index: 1;position: relative;background-color: white;}#sk-container-id-5 div.sk-parallel-item:first-child::after {align-self: flex-end;width: 50%;}#sk-container-id-5 div.sk-parallel-item:last-child::after {align-self: flex-start;width: 50%;}#sk-container-id-5 div.sk-parallel-item:only-child::after {width: 0;}#sk-container-id-5 div.sk-dashed-wrapped {border: 1px dashed gray;margin: 0 0.4em 0.5em 0.4em;box-sizing: border-box;padding-bottom: 0.4em;background-color: white;}#sk-container-id-5 div.sk-label label {font-family: monospace;font-weight: bold;display: inline-block;line-height: 1.2em;}#sk-container-id-5 div.sk-label-container {text-align: center;}#sk-container-id-5 div.sk-container {/* jupyter's `normalize.less` sets `[hidden] { display: none; }` but bootstrap.min.css set `[hidden] { display: none !important; }` so we also need the `!important` here to be able to override the default hidden behavior on the sphinx rendered scikit-learn.org. See: https://github.com/scikit-learn/scikit-learn/issues/21755 */display: inline-block !important;position: relative;}#sk-container-id-5 div.sk-text-repr-fallback {display: none;}</style><div id=\"sk-container-id-5\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>GridSearchCV(cv=5, estimator=RandomForestClassifier(random_state=0),\n",
       "             param_grid={&#x27;max_depth&#x27;: [2, 10, 20],\n",
       "                         &#x27;min_samples_split&#x27;: [5, 15, 30],\n",
       "                         &#x27;n_estimators&#x27;: [50, 120, 200]},\n",
       "             scoring=&#x27;accuracy&#x27;)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item sk-dashed-wrapped\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-5\" type=\"checkbox\" ><label for=\"sk-estimator-id-5\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">GridSearchCV</label><div class=\"sk-toggleable__content\"><pre>GridSearchCV(cv=5, estimator=RandomForestClassifier(random_state=0),\n",
       "             param_grid={&#x27;max_depth&#x27;: [2, 10, 20],\n",
       "                         &#x27;min_samples_split&#x27;: [5, 15, 30],\n",
       "                         &#x27;n_estimators&#x27;: [50, 120, 200]},\n",
       "             scoring=&#x27;accuracy&#x27;)</pre></div></div></div><div class=\"sk-parallel\"><div class=\"sk-parallel-item\"><div class=\"sk-item\"><div class=\"sk-label-container\"><div class=\"sk-label sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-6\" type=\"checkbox\" ><label for=\"sk-estimator-id-6\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">estimator: RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=0)</pre></div></div></div><div class=\"sk-serial\"><div class=\"sk-item\"><div class=\"sk-estimator sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-7\" type=\"checkbox\" ><label for=\"sk-estimator-id-7\" class=\"sk-toggleable__label sk-toggleable__label-arrow\">RandomForestClassifier</label><div class=\"sk-toggleable__content\"><pre>RandomForestClassifier(random_state=0)</pre></div></div></div></div></div></div></div></div></div></div>"
      ],
      "text/plain": [
       "GridSearchCV(cv=5, estimator=RandomForestClassifier(random_state=0),\n",
       "             param_grid={'max_depth': [2, 10, 20],\n",
       "                         'min_samples_split': [5, 15, 30],\n",
       "                         'n_estimators': [50, 120, 200]},\n",
       "             scoring='accuracy')"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Definir los hiperparámetros y sus posibles valores\n",
    "param_grid = {\n",
    "    'max_depth': [2, 10, 20],\n",
    "    'min_samples_split': [5, 15, 30],\n",
    "    'n_estimators': [50, 120, 200, ]\n",
    "}\n",
    "# Inicializar la búsqueda en cuadrícula\n",
    "grid_search = GridSearchCV(RandomForestClassifier(random_state=0), param_grid, cv=5, scoring='accuracy')\n",
    "# Ajustar el modelo con los datos de entrenamiento\n",
    "grid_search.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1aaae4c0",
   "metadata": {
    "papermill": {
     "duration": 0.020019,
     "end_time": "2024-11-17T04:29:11.016829",
     "exception": false,
     "start_time": "2024-11-17T04:29:10.996810",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "8.1 Se observan los mejores hiperparámetros encontrados con grid_search"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "f2faf2dd",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-17T04:29:11.061845Z",
     "iopub.status.busy": "2024-11-17T04:29:11.061274Z",
     "iopub.status.idle": "2024-11-17T04:29:11.068388Z",
     "shell.execute_reply": "2024-11-17T04:29:11.066996Z"
    },
    "papermill": {
     "duration": 0.03443,
     "end_time": "2024-11-17T04:29:11.072666",
     "exception": false,
     "start_time": "2024-11-17T04:29:11.038236",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mejores hiperparámetros: {'max_depth': 2, 'min_samples_split': 5, 'n_estimators': 50}\n"
     ]
    }
   ],
   "source": [
    "# Ver los mejores hiperparámetros\n",
    "print(\"Mejores hiperparámetros:\", grid_search.best_params_)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b1c10226",
   "metadata": {
    "papermill": {
     "duration": 0.020216,
     "end_time": "2024-11-17T04:29:11.113094",
     "exception": false,
     "start_time": "2024-11-17T04:29:11.092878",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "8.2 Dados estos mejores hiperparámetos seleccionados se vuelve inferir la varibale objetivo y se calcula sus metricas de rendimiento"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "592b68b8",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-17T04:29:11.158625Z",
     "iopub.status.busy": "2024-11-17T04:29:11.158078Z",
     "iopub.status.idle": "2024-11-17T04:29:11.171997Z",
     "shell.execute_reply": "2024-11-17T04:29:11.170801Z"
    },
    "papermill": {
     "duration": 0.039308,
     "end_time": "2024-11-17T04:29:11.175096",
     "exception": false,
     "start_time": "2024-11-17T04:29:11.135788",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "model_best = grid_search.best_estimator_\n",
    "y_pred_best = model_best.predict(X_val)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "5060c21f",
   "metadata": {
    "papermill": {
     "duration": 0.019842,
     "end_time": "2024-11-17T04:29:11.215215",
     "exception": false,
     "start_time": "2024-11-17T04:29:11.195373",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "9.1 Se evalua el rendimiento del modelo optimizado con los mejores hyperparámetros enocntrados"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "6f6021c1",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-17T04:29:11.258027Z",
     "iopub.status.busy": "2024-11-17T04:29:11.257494Z",
     "iopub.status.idle": "2024-11-17T04:29:11.288496Z",
     "shell.execute_reply": "2024-11-17T04:29:11.287025Z"
    },
    "papermill": {
     "duration": 0.056271,
     "end_time": "2024-11-17T04:29:11.291446",
     "exception": false,
     "start_time": "2024-11-17T04:29:11.235175",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Las metricas de rendimiento para el modelo de Bosque Aleatorio con los mejores hyperparámetros encontrados son las siguientes:\n",
      "Accuracy score: 1.0\n",
      "Pression scrore: 1.0\n",
      "Recall scrore: 1.0\n",
      "F1 scrore: 1.0\n",
      "Roc-Auc scrore: 1.0\n"
     ]
    }
   ],
   "source": [
    "# Para el modelo de Bosque aleatorio con los mejores hyperparámetros seleccionados\n",
    "# Evalua el rendimiento métricas de rendimiento: exactitud, precisión, recall, F1 y AUC-ROC.\n",
    "\n",
    "print(\"Las metricas de rendimiento para el modelo de Bosque Aleatorio con los mejores hyperparámetros encontrados son las siguientes:\")\n",
    "accuracy_best = accuracy_score(y_val, y_pred_best)\n",
    "print(f\"Accuracy score: {accuracy_best:.1f}\")\n",
    "pression_best = precision_score(y_val, y_pred_best)\n",
    "print(f\"Pression scrore: {pression_best:.1f}\")\n",
    "recall_best= recall_score(y_val, y_pred_best, average='binary', zero_division=1)\n",
    "print(f\"Recall scrore: {recall_best:.1f}\")\n",
    "f1_best = f1_score(y_val, y_pred_best, zero_division=1.0)\n",
    "print(f\"F1 scrore: {f1_best:.1f}\")\n",
    "roc_best = roc_auc_score(y, model_best.predict_proba(X)[:, 1])\n",
    "print(f\"Roc-Auc scrore: {roc_best:.1f}\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e5e6acda",
   "metadata": {
    "papermill": {
     "duration": 0.02492,
     "end_time": "2024-11-17T04:29:11.336837",
     "exception": false,
     "start_time": "2024-11-17T04:29:11.311917",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "9.2 Se genera la matriz de confusión"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "b5cd7b94",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-17T04:29:11.390236Z",
     "iopub.status.busy": "2024-11-17T04:29:11.389713Z",
     "iopub.status.idle": "2024-11-17T04:29:11.401860Z",
     "shell.execute_reply": "2024-11-17T04:29:11.400356Z"
    },
    "papermill": {
     "duration": 0.03918,
     "end_time": "2024-11-17T04:29:11.405022",
     "exception": false,
     "start_time": "2024-11-17T04:29:11.365842",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[ 9,  0],\n",
       "       [ 0, 11]])"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cm = confusion_matrix(y_val, y_pred1)\n",
    "cm"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b987e0ce",
   "metadata": {
    "papermill": {
     "duration": 0.021094,
     "end_time": "2024-11-17T04:29:11.448383",
     "exception": false,
     "start_time": "2024-11-17T04:29:11.427289",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "9.2 Se identifica de la matriz de confusión que\n",
    "True Postitive son igual a 9,\n",
    "False Negative son 0,\n",
    "False Positive son 0,\n",
    "True Negative son 11,"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "80703756",
   "metadata": {
    "papermill": {
     "duration": 0.021638,
     "end_time": "2024-11-17T04:29:11.490929",
     "exception": false,
     "start_time": "2024-11-17T04:29:11.469291",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "9.2 De forma extra se genera y muestra el reporte de metricos con el modelo de Bosque Aleatorio y con los mejores hyperparametros"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "28e68059",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2024-11-17T04:29:11.535373Z",
     "iopub.status.busy": "2024-11-17T04:29:11.534835Z",
     "iopub.status.idle": "2024-11-17T04:29:11.553901Z",
     "shell.execute_reply": "2024-11-17T04:29:11.552117Z"
    },
    "papermill": {
     "duration": 0.044937,
     "end_time": "2024-11-17T04:29:11.556978",
     "exception": false,
     "start_time": "2024-11-17T04:29:11.512041",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      1.00      1.00         9\n",
      "           1       1.00      1.00      1.00        11\n",
      "\n",
      "    accuracy                           1.00        20\n",
      "   macro avg       1.00      1.00      1.00        20\n",
      "weighted avg       1.00      1.00      1.00        20\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print(classification_report(y_val, y_pred_best))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3b515c66",
   "metadata": {
    "papermill": {
     "duration": 0.030667,
     "end_time": "2024-11-17T04:29:11.609486",
     "exception": false,
     "start_time": "2024-11-17T04:29:11.578819",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "Conclusiones:\n",
    "Todos los modelos utilizados en el presente ejercicio resultaron tener una predicción muy exacta del 100% por lo que cualquiera de ellos resulta util para realizar predicciones, de igual forma este ejercicio presenta una gran oportunidad de practica y reforzamiento de conocimiento adquiridos en las clases del presente curso, por ejemplo, la identificación de requistros nullos, el escalamiento, defición de variables de entrenamiento e inferencia, visualización de datos, identificación de caracteristicas cuantitativas y cualitativas, uso de modelos de predicción y calculo de sus metricas, así como herramientas de optimización de hiperparametros.\n",
    "Agradezco el tiempo y atención del instructor.\n",
    "\n",
    "Escrito por:\n",
    "Hector Valdes Hurtado"
   ]
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "datasetId": 6053092,
     "sourceId": 9862380,
     "sourceType": "datasetVersion"
    }
   ],
   "dockerImageVersionId": 30786,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.14"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 51.185079,
   "end_time": "2024-11-17T04:29:12.662110",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2024-11-17T04:28:21.477031",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
